"use client";

import React, { useState, useEffect } from 'react';
import { Calendar } from '@/components/ui/calendar';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Calendar as CalendarIcon, Clock, MapPin, User, Plus, X } from 'lucide-react';
import { format, addDays, isSameDay, parseISO } from 'date-fns';
import { Appointment, AppointmentType, AppointmentStatus } from '@/types';

interface AppointmentCalendarProps {
  userId: string;
  role: 'client' | 'tasker';
  onAppointmentSelect?: (appointment: Appointment) => void;
}

export function AppointmentCalendar({ userId, role, onAppointmentSelect }: AppointmentCalendarProps) {
  const [date, setDate] = useState<Date | undefined>(new Date());
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [selectedAppointment, setSelectedAppointment] = useState<Appointment | null>(null);
  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  // Form state for creating appointments
  const [formData, setFormData] = useState({
    title: '',
    description: '',
    appointmentType: 'consultation' as AppointmentType,
    startTime: '',
    endTime: '',
    duration: 60,
    location: ''
  });

  useEffect(() => {
    if (date) {
      fetchAppointments();
    }
  }, [date, userId, role]);

  const fetchAppointments = async () => {
    if (!date) return;

    setIsLoading(true);
    try {
      const startOfDay = new Date(date);
      startOfDay.setHours(0, 0, 0, 0);
      
      const endOfDay = new Date(date);
      endOfDay.setHours(23, 59, 59, 999);

      const response = await fetch(
        `/api/appointments/user?userId=${userId}&role=${role}&startDate=${startOfDay.toISOString()}&endDate=${endOfDay.toISOString()}`
      );
      
      if (response.ok) {
        const data = await response.json();
        setAppointments(data.appointments || []);
      }
    } catch (error) {
      console.error('Error fetching appointments:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const handleCreateAppointment = async () => {
    if (!date || !formData.title || !formData.startTime || !formData.endTime || !formData.location) {
      return;
    }

    setIsLoading(true);
    try {
      const startDateTime = new Date(date);
      const [startHour, startMinute] = formData.startTime.split(':');
      startDateTime.setHours(parseInt(startHour), parseInt(startMinute), 0, 0);

      const endDateTime = new Date(date);
      const [endHour, endMinute] = formData.endTime.split(':');
      endDateTime.setHours(parseInt(endHour), parseInt(endMinute), 0, 0);

      const response = await fetch('/api/appointments/create', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          taskerId: role === 'tasker' ? userId : 'tasker-id', // Replace with actual tasker selection
          taskerName: role === 'tasker' ? 'Current User' : 'Selected Tasker', // Replace with actual tasker name
          title: formData.title,
          description: formData.description,
          appointmentType: formData.appointmentType,
          startTime: startDateTime.toISOString(),
          endTime: endDateTime.toISOString(),
          duration: formData.duration,
          location: formData.location
        }),
      });

      if (response.ok) {
        const data = await response.json();
        setAppointments(prev => [...prev, data.appointment]);
        setIsCreateDialogOpen(false);
        setFormData({
          title: '',
          description: '',
          appointmentType: 'consultation',
          startTime: '',
          endTime: '',
          duration: 60,
          location: ''
        });
      }
    } catch (error) {
      console.error('Error creating appointment:', error);
    } finally {
      setIsLoading(false);
    }
  };

  const getAppointmentsForDate = (date: Date) => {
    return appointments.filter(appointment => 
      isSameDay(parseISO(appointment.startTime.toDate().toISOString()), date)
    );
  };

  const getStatusColor = (status: AppointmentStatus) => {
    switch (status) {
      case 'confirmed':
        return 'bg-green-100 text-green-800';
      case 'pending':
        return 'bg-yellow-100 text-yellow-800';
      case 'cancelled':
        return 'bg-red-100 text-red-800';
      case 'completed':
        return 'bg-blue-100 text-blue-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getTypeIcon = (type: AppointmentType) => {
    switch (type) {
      case 'consultation':
        return 'ðŸ’¬';
      case 'service':
        return 'ðŸ”§';
      case 'meeting':
        return 'ðŸ‘¥';
      case 'follow_up':
        return 'ðŸ”„';
      default:
        return 'ðŸ“…';
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <h2 className="text-2xl font-bold">Appointment Calendar</h2>
        {role === 'client' && (
          <Dialog open={isCreateDialogOpen} onOpenChange={setIsCreateDialogOpen}>
            <DialogTrigger asChild>
              <Button>
                <Plus className="mr-2 h-4 w-4" />
                New Appointment
              </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-[425px]">
              <DialogHeader>
                <DialogTitle>Create New Appointment</DialogTitle>
              </DialogHeader>
              <div className="grid gap-4 py-4">
                <div className="grid gap-2">
                  <Label htmlFor="title">Title</Label>
                  <Input
                    id="title"
                    value={formData.title}
                    onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}
                    placeholder="Appointment title"
                  />
                </div>
                <div className="grid gap-2">
                  <Label htmlFor="description">Description</Label>
                  <Textarea
                    id="description"
                    value={formData.description}
                    onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))}
                    placeholder="Appointment description"
                  />
                </div>
                <div className="grid gap-2">
                  <Label htmlFor="type">Type</Label>
                  <Select
                    value={formData.appointmentType}
                    onValueChange={(value) => setFormData(prev => ({ ...prev, appointmentType: value as AppointmentType }))}
                  >
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="consultation">Consultation</SelectItem>
                      <SelectItem value="service">Service</SelectItem>
                      <SelectItem value="meeting">Meeting</SelectItem>
                      <SelectItem value="follow_up">Follow-up</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="grid grid-cols-2 gap-2">
                  <div>
                    <Label htmlFor="startTime">Start Time</Label>
                    <Input
                      id="startTime"
                      type="time"
                      value={formData.startTime}
                      onChange={(e) => setFormData(prev => ({ ...prev, startTime: e.target.value }))}
                    />
                  </div>
                  <div>
                    <Label htmlFor="endTime">End Time</Label>
                    <Input
                      id="endTime"
                      type="time"
                      value={formData.endTime}
                      onChange={(e) => setFormData(prev => ({ ...prev, endTime: e.target.value }))}
                    />
                  </div>
                </div>
                <div className="grid gap-2">
                  <Label htmlFor="location">Location</Label>
                  <Input
                    id="location"
                    value={formData.location}
                    onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))}
                    placeholder="Appointment location"
                  />
                </div>
              </div>
              <div className="flex justify-end space-x-2">
                <Button variant="outline" onClick={() => setIsCreateDialogOpen(false)}>
                  Cancel
                </Button>
                <Button onClick={handleCreateAppointment} disabled={isLoading}>
                  {isLoading ? 'Creating...' : 'Create Appointment'}
                </Button>
              </div>
            </DialogContent>
          </Dialog>
        )}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        <div className="lg:col-span-1">
          <Calendar
            mode="single"
            selected={date}
            onSelect={setDate}
            className="rounded-md border"
            disabled={(date) => date < new Date()}
          />
        </div>

        <div className="lg:col-span-2">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <CalendarIcon className="h-5 w-5" />
                {date ? format(date, 'EEEE, MMMM d, yyyy') : 'Select a date'}
              </CardTitle>
            </CardHeader>
            <CardContent>
              {isLoading ? (
                <div className="text-center py-8">
                  <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto"></div>
                  <p className="mt-2 text-sm text-muted-foreground">Loading appointments...</p>
                </div>
              ) : date ? (
                <div className="space-y-4">
                  {getAppointmentsForDate(date).length === 0 ? (
                    <div className="text-center py-8">
                      <CalendarIcon className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                      <p className="text-muted-foreground">No appointments scheduled for this date</p>
                    </div>
                  ) : (
                    getAppointmentsForDate(date).map((appointment) => (
                      <Card key={appointment.id} className="cursor-pointer hover:shadow-md transition-shadow">
                        <CardContent className="p-4">
                          <div className="flex items-start justify-between">
                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-2">
                                <span className="text-lg">{getTypeIcon(appointment.appointmentType)}</span>
                                <h3 className="font-semibold">{appointment.title}</h3>
                                <Badge className={getStatusColor(appointment.status)}>
                                  {appointment.status}
                                </Badge>
                              </div>
                              <p className="text-sm text-muted-foreground mb-3">
                                {appointment.description}
                              </p>
                              <div className="flex items-center gap-4 text-sm text-muted-foreground">
                                <div className="flex items-center gap-1">
                                  <Clock className="h-4 w-4" />
                                  {format(parseISO(appointment.startTime.toDate().toISOString()), 'HH:mm')} - {format(parseISO(appointment.endTime.toDate().toISOString()), 'HH:mm')}
                                </div>
                                <div className="flex items-center gap-1">
                                  <MapPin className="h-4 w-4" />
                                  {appointment.location}
                                </div>
                                <div className="flex items-center gap-1">
                                  <User className="h-4 w-4" />
                                  {role === 'client' ? appointment.taskerName : appointment.clientName}
                                </div>
                              </div>
                            </div>
                            <Button
                              variant="ghost"
                              size="sm"
                              onClick={() => {
                                setSelectedAppointment(appointment);
                                onAppointmentSelect?.(appointment);
                              }}
                            >
                              View
                            </Button>
                          </div>
                        </CardContent>
                      </Card>
                    )))
                  )}
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>

      {/* Appointment Details Dialog */}
      {selectedAppointment && (
        <Dialog open={!!selectedAppointment} onOpenChange={() => setSelectedAppointment(null)}>
          <DialogContent className="sm:max-w-[500px]">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2">
                <span className="text-lg">{getTypeIcon(selectedAppointment.appointmentType)}</span>
                {selectedAppointment.title}
              </DialogTitle>
            </DialogHeader>
            <div className="space-y-4">
              <div>
                <Label className="text-sm font-medium">Status</Label>
                <Badge className={`mt-1 ${getStatusColor(selectedAppointment.status)}`}>
                  {selectedAppointment.status}
                </Badge>
              </div>
              <div>
                <Label className="text-sm font-medium">Description</Label>
                <p className="mt-1 text-sm text-muted-foreground">
                  {selectedAppointment.description || 'No description provided'}
                </p>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label className="text-sm font-medium">Date & Time</Label>
                  <p className="mt-1 text-sm text-muted-foreground">
                    {format(parseISO(selectedAppointment.startTime.toDate().toISOString()), 'MMM d, yyyy HH:mm')} - {format(parseISO(selectedAppointment.endTime.toDate().toISOString()), 'HH:mm')}
                  </p>
                </div>
                <div>
                  <Label className="text-sm font-medium">Duration</Label>
                  <p className="mt-1 text-sm text-muted-foreground">
                    {selectedAppointment.duration} minutes
                  </p>
                </div>
              </div>
              <div>
                <Label className="text-sm font-medium">Location</Label>
                <p className="mt-1 text-sm text-muted-foreground">
                  {selectedAppointment.location}
                </p>
              </div>
              {selectedAppointment.notes && (
                <div>
                  <Label className="text-sm font-medium">Notes</Label>
                  <p className="mt-1 text-sm text-muted-foreground">
                    {selectedAppointment.notes}
                  </p>
                </div>
              )}
            </div>
          </DialogContent>
        </Dialog>
      )}
    </div>
  );
} 